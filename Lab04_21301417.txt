class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class ListStack:
    def __init__(self):
        self.head = None

    def isEmpty(self):
        if self.head is None:
            return True
        else:
            return False

    def push(self, data):

        if self.head is None:
            self.head = Node(data)
        else:
            new = Node(data)
            new.next = self.head
            self.head = new

    def pop(self):
        if self.isEmpty():
            return None
        else:
            pop = self.head
            self.head = self.head.next
            pop.next = None
            return pop.data

    def peek(self):
        if self.isEmpty():
            return None
        else:
            return self.head.data

    def showListStack(self):

        n = self.head
        if self.isEmpty():
            print("Stack Underflow")

        else:

            while n is not None:
                print(n.data, "->", end=" ")
                n = n.next
            return

    def checkParenthesis(self, string):
        open = '({['
        close = ')}]'
        count = 0
        char = ''
        for i in range(len(string)):
            if string[i] in open:
                self.push(string[i])
            elif string[i] in close:
                if self.isEmpty() is True:
                    count = i + 1
                    char = string[i]
                else:
                    temp = self.peek()
                    if open.index(temp) == close.index(string[i]):
                        self.pop()
                    else:
                        count = i + 1
                        char = string[i]
                        print(count)
                break

        if count == 0:
            print("This expression is correct")
        else:
            if char in close:
                print("Error at character #%s, '%s'-not opened" %(count, char))
            else:
                print("Error at character #%s, '%s'-not closed" %(count, char))


class ArrayStack:
    def __init__(self, string):
        self.size = len(string)
        self.stack = [0] * self.size

    def isEmpty(self):
        return self.size == 0

    def push(self, data):
        for i in self.stack:
            if i == 0:
                i = data
                break

    def pop(self):
        temp = ''
        for i in range(self.size):
            if (self.stack[i + 1]) == 0:
                temp = i
                i = 0
                break
        return temp

    def peek(self):
        temp = ''
        for i in range(self.size):
            if (self.stack[i + 1]) == 0:
                temp = i
                break
        print(temp)
        
    def checkParenthesis(self, string):
        open = '({['
        close = ')}]'
        count = 0
        char = ''
        for i in range(len(string)):
            if string[i] in open:
                self.push(string[i])
            elif string[i] in close:
                if self.isEmpty() is True:
                    count = i + 1
                    char = string[i]
                else:
                    temp = self.peek()
                    if open.index(temp) == close.index(string[i]):
                        self.pop()
                    else:
                        count = i + 1
                        char = string[i]
                        print(count)
                break

        if count == 0:
            print("This expression is correct")
        else:
            if char in close:
                print("Error at character #%s, '%s'-not opened" %(count, char))
            else:
                print("Error at character #%s, '%s'-not closed" %(count, char))
        
ListStack = ListStack()
exp1 = "[[[(]]]"
ListStack.checkParenthesis(exp1)